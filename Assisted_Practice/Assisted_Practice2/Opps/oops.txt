          ---------------------------       OOPS        -------------------------
 *  >   Object-Oriented Programming :   is a methodology or paradigm to design a program using 
 *                              classes and objects. It simplifies the software development and 
 *                               maintenance by providing some concepts defined below :
 *          
 *          > Class     :
 *                      - Class is a user-defined data type which defines its properties and its
 *                        functions. Class is the only logical representation of the data. For
 *                        example, Human being is a class. The body parts of a human being are its
 *                        properties, and the actions performed by the body parts are known as
 *                        functions. The class does not occupy any memory space till the time an
 *                        object is instantiated.
 * 
 *          > Object    :
 *                     - Object is a run-time entity. It is an instance of the class. An object can
 *                       represent a person, place or any other item. An object can operate on
 *                       both data members and member functions.
 *                     >    Syntax :
 *                              Class n = new Class();
 *                                   /     |         \
 *                       reference var.  create obj    constructor...
 * 
 *          > Inheritance :
 *                        - Inheritance is a process in which one object acquires all the properties and
 *                          behaviors of its parent object automatically. In such a way, you can reuse,
 *                          extend or modify the attributes and behaviors which are defined in other
 *                          classes.
 *                  > used :    with Extend keywords..
 *                      -   eg:     class anything extends ineritSuperClass{}
 * 
 *          > Encapsulation :
 *                  >    When the Data members and members functions are binded in a single unit..it's called
 *                       Encapsulations.
 *                  >    Encapsulation is used prevent the data from being accessed by the code outside
 *                       this sheild..
 *                  >    attributes of the class are kept private and public getter and setter methods
 *                       are provided to manipulate these attributes...
 *                  >    It provides data-hiding concept...
 *              
 *          > Abstraction  :
 *                      - Abstraction is a process of hiding the implementation details and showing only *                        functionality to the user.
 *                          - eg : 
 *                               sending SMS where you type the text and send the message. You don't 
 *                               know the internal processing about the message delivery.
 *                      
 *                       >  class declared with abstract keyword..
 *                       >  abstract method declared without implementation..
 *                       >  method declared in abstract class must be defined in its child class..
 *                       >  abstract class object can't be created or can't be directly 
 *                          instantiated with the new operator....
 *                       >  abstract class can have parameterized constructor....
 * 
 * 
 *          > Polymorphism :     
 *                      -  polymorphism as the ability of a message to be displayed in more than one form. 
 *                          eg :-
 *                              -  Like a man at the same time is a father, a husband, an employee. 
 *                                  So the same person possesses different behavior in different situations.
 * 
 *               >  Types :
 * 
 *                    ● Compile Time Polymorphism : The polymorphism which is implemented at the compile
 *                                                  time is known as compile-time polymorphism. 
 *                                eg :- Method Overloading..
 * 
 *                          > Method Overloading :
 *                                        - It is a technique which allows you to have more than one 
 *                                      function with the same function name but with different functionality. *                            
 *                            Method overloading can be possible :
 *                                    1. The return type of the overloaded function.
 *                                    2. The type of the parameters passed to the function.
 *                                    3. The number of parameters passed to the function.
 * 
 *                    ● Run Time Polymorphism : Runtime polymorphism is also known as dynamic polymorphism.
 *                                eg :- Method Overriding.. 
 * 
 *                                - Function overriding means when the child class contains the method 
 *                                  which is already present in the parent class. Hence, the child
 *                                  class overrides the method of the parent class.
 *                                
 *                                - In case of function overriding, parent and child classes both contain 
 *                                  he same function with a different definition. 
 *                             
 *                     - The call to the function is determined at runtime is known as runtime polymorphism
 * 
 * 
 * 
 */